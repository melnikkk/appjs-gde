/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as AppImport } from './app/App'
import { Route as RoutesIndexImport } from './app/routes/index'
import { Route as HooksHooksImport } from './app/hooks/hooks'
import { Route as HocsWithProvidersImport } from './app/hocs/withProviders'
import { Route as ContextsRecordingContextImport } from './app/contexts/recordingContext'
import { Route as PagesRecordingsIndexImport } from './app/pages/Recordings/index'
import { Route as PagesRecordingIndexImport } from './app/pages/Recording/index'
import { Route as PagesRecordingUtilsImport } from './app/pages/Recording/utils'
import { Route as PagesRecordingTypesImport } from './app/pages/Recording/types'
import { Route as PagesRecordingConstantsImport } from './app/pages/Recording/constants'
import { Route as PagesRecordingVideoPlayerImport } from './app/pages/Recording/VideoPlayer'
import { Route as PagesRecordingCanvasOverlayImport } from './app/pages/Recording/CanvasOverlay'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/App',
  path: '/App',
  getParentRoute: () => rootRoute,
} as any)

const RoutesIndexRoute = RoutesIndexImport.update({
  id: '/routes/',
  path: '/routes/',
  getParentRoute: () => rootRoute,
} as any)

const HooksHooksRoute = HooksHooksImport.update({
  id: '/hooks/hooks',
  path: '/hooks/hooks',
  getParentRoute: () => rootRoute,
} as any)

const HocsWithProvidersRoute = HocsWithProvidersImport.update({
  id: '/hocs/withProviders',
  path: '/hocs/withProviders',
  getParentRoute: () => rootRoute,
} as any)

const ContextsRecordingContextRoute = ContextsRecordingContextImport.update({
  id: '/contexts/recordingContext',
  path: '/contexts/recordingContext',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingsIndexRoute = PagesRecordingsIndexImport.update({
  id: '/pages/Recordings/',
  path: '/pages/Recordings/',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingIndexRoute = PagesRecordingIndexImport.update({
  id: '/pages/Recording/',
  path: '/pages/Recording/',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingUtilsRoute = PagesRecordingUtilsImport.update({
  id: '/pages/Recording/utils',
  path: '/pages/Recording/utils',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingTypesRoute = PagesRecordingTypesImport.update({
  id: '/pages/Recording/types',
  path: '/pages/Recording/types',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingConstantsRoute = PagesRecordingConstantsImport.update({
  id: '/pages/Recording/constants',
  path: '/pages/Recording/constants',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingVideoPlayerRoute = PagesRecordingVideoPlayerImport.update({
  id: '/pages/Recording/VideoPlayer',
  path: '/pages/Recording/VideoPlayer',
  getParentRoute: () => rootRoute,
} as any)

const PagesRecordingCanvasOverlayRoute =
  PagesRecordingCanvasOverlayImport.update({
    id: '/pages/Recording/CanvasOverlay',
    path: '/pages/Recording/CanvasOverlay',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/App': {
      id: '/App'
      path: '/App'
      fullPath: '/App'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/contexts/recordingContext': {
      id: '/contexts/recordingContext'
      path: '/contexts/recordingContext'
      fullPath: '/contexts/recordingContext'
      preLoaderRoute: typeof ContextsRecordingContextImport
      parentRoute: typeof rootRoute
    }
    '/hocs/withProviders': {
      id: '/hocs/withProviders'
      path: '/hocs/withProviders'
      fullPath: '/hocs/withProviders'
      preLoaderRoute: typeof HocsWithProvidersImport
      parentRoute: typeof rootRoute
    }
    '/hooks/hooks': {
      id: '/hooks/hooks'
      path: '/hooks/hooks'
      fullPath: '/hooks/hooks'
      preLoaderRoute: typeof HooksHooksImport
      parentRoute: typeof rootRoute
    }
    '/routes/': {
      id: '/routes/'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/CanvasOverlay': {
      id: '/pages/Recording/CanvasOverlay'
      path: '/pages/Recording/CanvasOverlay'
      fullPath: '/pages/Recording/CanvasOverlay'
      preLoaderRoute: typeof PagesRecordingCanvasOverlayImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/VideoPlayer': {
      id: '/pages/Recording/VideoPlayer'
      path: '/pages/Recording/VideoPlayer'
      fullPath: '/pages/Recording/VideoPlayer'
      preLoaderRoute: typeof PagesRecordingVideoPlayerImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/constants': {
      id: '/pages/Recording/constants'
      path: '/pages/Recording/constants'
      fullPath: '/pages/Recording/constants'
      preLoaderRoute: typeof PagesRecordingConstantsImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/types': {
      id: '/pages/Recording/types'
      path: '/pages/Recording/types'
      fullPath: '/pages/Recording/types'
      preLoaderRoute: typeof PagesRecordingTypesImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/utils': {
      id: '/pages/Recording/utils'
      path: '/pages/Recording/utils'
      fullPath: '/pages/Recording/utils'
      preLoaderRoute: typeof PagesRecordingUtilsImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recording/': {
      id: '/pages/Recording/'
      path: '/pages/Recording'
      fullPath: '/pages/Recording'
      preLoaderRoute: typeof PagesRecordingIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/Recordings/': {
      id: '/pages/Recordings/'
      path: '/pages/Recordings'
      fullPath: '/pages/Recordings'
      preLoaderRoute: typeof PagesRecordingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/App': typeof AppRoute
  '/contexts/recordingContext': typeof ContextsRecordingContextRoute
  '/hocs/withProviders': typeof HocsWithProvidersRoute
  '/hooks/hooks': typeof HooksHooksRoute
  '/routes': typeof RoutesIndexRoute
  '/pages/Recording/CanvasOverlay': typeof PagesRecordingCanvasOverlayRoute
  '/pages/Recording/VideoPlayer': typeof PagesRecordingVideoPlayerRoute
  '/pages/Recording/constants': typeof PagesRecordingConstantsRoute
  '/pages/Recording/types': typeof PagesRecordingTypesRoute
  '/pages/Recording/utils': typeof PagesRecordingUtilsRoute
  '/pages/Recording': typeof PagesRecordingIndexRoute
  '/pages/Recordings': typeof PagesRecordingsIndexRoute
}

export interface FileRoutesByTo {
  '/App': typeof AppRoute
  '/contexts/recordingContext': typeof ContextsRecordingContextRoute
  '/hocs/withProviders': typeof HocsWithProvidersRoute
  '/hooks/hooks': typeof HooksHooksRoute
  '/routes': typeof RoutesIndexRoute
  '/pages/Recording/CanvasOverlay': typeof PagesRecordingCanvasOverlayRoute
  '/pages/Recording/VideoPlayer': typeof PagesRecordingVideoPlayerRoute
  '/pages/Recording/constants': typeof PagesRecordingConstantsRoute
  '/pages/Recording/types': typeof PagesRecordingTypesRoute
  '/pages/Recording/utils': typeof PagesRecordingUtilsRoute
  '/pages/Recording': typeof PagesRecordingIndexRoute
  '/pages/Recordings': typeof PagesRecordingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/App': typeof AppRoute
  '/contexts/recordingContext': typeof ContextsRecordingContextRoute
  '/hocs/withProviders': typeof HocsWithProvidersRoute
  '/hooks/hooks': typeof HooksHooksRoute
  '/routes/': typeof RoutesIndexRoute
  '/pages/Recording/CanvasOverlay': typeof PagesRecordingCanvasOverlayRoute
  '/pages/Recording/VideoPlayer': typeof PagesRecordingVideoPlayerRoute
  '/pages/Recording/constants': typeof PagesRecordingConstantsRoute
  '/pages/Recording/types': typeof PagesRecordingTypesRoute
  '/pages/Recording/utils': typeof PagesRecordingUtilsRoute
  '/pages/Recording/': typeof PagesRecordingIndexRoute
  '/pages/Recordings/': typeof PagesRecordingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/App'
    | '/contexts/recordingContext'
    | '/hocs/withProviders'
    | '/hooks/hooks'
    | '/routes'
    | '/pages/Recording/CanvasOverlay'
    | '/pages/Recording/VideoPlayer'
    | '/pages/Recording/constants'
    | '/pages/Recording/types'
    | '/pages/Recording/utils'
    | '/pages/Recording'
    | '/pages/Recordings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/App'
    | '/contexts/recordingContext'
    | '/hocs/withProviders'
    | '/hooks/hooks'
    | '/routes'
    | '/pages/Recording/CanvasOverlay'
    | '/pages/Recording/VideoPlayer'
    | '/pages/Recording/constants'
    | '/pages/Recording/types'
    | '/pages/Recording/utils'
    | '/pages/Recording'
    | '/pages/Recordings'
  id:
    | '__root__'
    | '/App'
    | '/contexts/recordingContext'
    | '/hocs/withProviders'
    | '/hooks/hooks'
    | '/routes/'
    | '/pages/Recording/CanvasOverlay'
    | '/pages/Recording/VideoPlayer'
    | '/pages/Recording/constants'
    | '/pages/Recording/types'
    | '/pages/Recording/utils'
    | '/pages/Recording/'
    | '/pages/Recordings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRoute
  ContextsRecordingContextRoute: typeof ContextsRecordingContextRoute
  HocsWithProvidersRoute: typeof HocsWithProvidersRoute
  HooksHooksRoute: typeof HooksHooksRoute
  RoutesIndexRoute: typeof RoutesIndexRoute
  PagesRecordingCanvasOverlayRoute: typeof PagesRecordingCanvasOverlayRoute
  PagesRecordingVideoPlayerRoute: typeof PagesRecordingVideoPlayerRoute
  PagesRecordingConstantsRoute: typeof PagesRecordingConstantsRoute
  PagesRecordingTypesRoute: typeof PagesRecordingTypesRoute
  PagesRecordingUtilsRoute: typeof PagesRecordingUtilsRoute
  PagesRecordingIndexRoute: typeof PagesRecordingIndexRoute
  PagesRecordingsIndexRoute: typeof PagesRecordingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRoute,
  ContextsRecordingContextRoute: ContextsRecordingContextRoute,
  HocsWithProvidersRoute: HocsWithProvidersRoute,
  HooksHooksRoute: HooksHooksRoute,
  RoutesIndexRoute: RoutesIndexRoute,
  PagesRecordingCanvasOverlayRoute: PagesRecordingCanvasOverlayRoute,
  PagesRecordingVideoPlayerRoute: PagesRecordingVideoPlayerRoute,
  PagesRecordingConstantsRoute: PagesRecordingConstantsRoute,
  PagesRecordingTypesRoute: PagesRecordingTypesRoute,
  PagesRecordingUtilsRoute: PagesRecordingUtilsRoute,
  PagesRecordingIndexRoute: PagesRecordingIndexRoute,
  PagesRecordingsIndexRoute: PagesRecordingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/App",
        "/contexts/recordingContext",
        "/hocs/withProviders",
        "/hooks/hooks",
        "/routes/",
        "/pages/Recording/CanvasOverlay",
        "/pages/Recording/VideoPlayer",
        "/pages/Recording/constants",
        "/pages/Recording/types",
        "/pages/Recording/utils",
        "/pages/Recording/",
        "/pages/Recordings/"
      ]
    },
    "/App": {
      "filePath": "App.tsx"
    },
    "/contexts/recordingContext": {
      "filePath": "contexts/recordingContext.tsx"
    },
    "/hocs/withProviders": {
      "filePath": "hocs/withProviders.tsx"
    },
    "/hooks/hooks": {
      "filePath": "hooks/hooks.ts"
    },
    "/routes/": {
      "filePath": "routes/index.tsx"
    },
    "/pages/Recording/CanvasOverlay": {
      "filePath": "pages/Recording/CanvasOverlay.tsx"
    },
    "/pages/Recording/VideoPlayer": {
      "filePath": "pages/Recording/VideoPlayer.tsx"
    },
    "/pages/Recording/constants": {
      "filePath": "pages/Recording/constants.ts"
    },
    "/pages/Recording/types": {
      "filePath": "pages/Recording/types.ts"
    },
    "/pages/Recording/utils": {
      "filePath": "pages/Recording/utils.ts"
    },
    "/pages/Recording/": {
      "filePath": "pages/Recording/index.tsx"
    },
    "/pages/Recordings/": {
      "filePath": "pages/Recordings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
