/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AuthImport } from './routes/_auth';
import { Route as SettingsRouteImport } from './routes/settings.route';
import { Route as ProfileRouteImport } from './routes/profile.route';
import { Route as GuidesRouteImport } from './routes/guides.route';
import { Route as IndexRouteImport } from './routes/index.route';
import { Route as RecordingsIndexRouteImport } from './routes/recordings/index.route';
import { Route as RecordingsIdRouteImport } from './routes/recordings/$id.route';
import { Route as AuthSignUpRouteImport } from './routes/_auth/sign-up.route';
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in.route';

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any);

const ProfileRouteRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any);

const GuidesRouteRoute = GuidesRouteImport.update({
  id: '/guides',
  path: '/guides',
  getParentRoute: () => rootRoute,
} as any);

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const RecordingsIndexRouteRoute = RecordingsIndexRouteImport.update({
  id: '/recordings/',
  path: '/recordings/',
  getParentRoute: () => rootRoute,
} as any);

const RecordingsIdRouteRoute = RecordingsIdRouteImport.update({
  id: '/recordings/$id',
  path: '/recordings/$id',
  getParentRoute: () => rootRoute,
} as any);

const AuthSignUpRouteRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any);

const AuthSignInRouteRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/guides': {
      id: '/guides';
      path: '/guides';
      fullPath: '/guides';
      preLoaderRoute: typeof GuidesRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/profile': {
      id: '/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/sign-in': {
      id: '/_auth/sign-in';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof AuthSignInRouteImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/sign-up': {
      id: '/_auth/sign-up';
      path: '/sign-up';
      fullPath: '/sign-up';
      preLoaderRoute: typeof AuthSignUpRouteImport;
      parentRoute: typeof AuthImport;
    };
    '/recordings/$id': {
      id: '/recordings/$id';
      path: '/recordings/$id';
      fullPath: '/recordings/$id';
      preLoaderRoute: typeof RecordingsIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/recordings/': {
      id: '/recordings/';
      path: '/recordings';
      fullPath: '/recordings';
      preLoaderRoute: typeof RecordingsIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRouteRoute: typeof AuthSignInRouteRoute;
  AuthSignUpRouteRoute: typeof AuthSignUpRouteRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRouteRoute: AuthSignInRouteRoute,
  AuthSignUpRouteRoute: AuthSignUpRouteRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '': typeof AuthRouteWithChildren;
  '/sign-in': typeof AuthSignInRouteRoute;
  '/sign-up': typeof AuthSignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings': typeof RecordingsIndexRouteRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '': typeof AuthRouteWithChildren;
  '/sign-in': typeof AuthSignInRouteRoute;
  '/sign-up': typeof AuthSignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings': typeof RecordingsIndexRouteRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_auth/sign-in': typeof AuthSignInRouteRoute;
  '/_auth/sign-up': typeof AuthSignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings/': typeof RecordingsIndexRouteRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/recordings/$id'
    | '/recordings';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/recordings/$id'
    | '/recordings';
  id:
    | '__root__'
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | '/_auth'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/recordings/$id'
    | '/recordings/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute;
  GuidesRouteRoute: typeof GuidesRouteRoute;
  ProfileRouteRoute: typeof ProfileRouteRoute;
  SettingsRouteRoute: typeof SettingsRouteRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  RecordingsIdRouteRoute: typeof RecordingsIdRouteRoute;
  RecordingsIndexRouteRoute: typeof RecordingsIndexRouteRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  GuidesRouteRoute: GuidesRouteRoute,
  ProfileRouteRoute: ProfileRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  AuthRoute: AuthRouteWithChildren,
  RecordingsIdRouteRoute: RecordingsIdRouteRoute,
  RecordingsIndexRouteRoute: RecordingsIndexRouteRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/guides",
        "/profile",
        "/settings",
        "/_auth",
        "/recordings/$id",
        "/recordings/"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/guides": {
      "filePath": "guides.route.tsx"
    },
    "/profile": {
      "filePath": "profile.route.tsx"
    },
    "/settings": {
      "filePath": "settings.route.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.route.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.route.tsx",
      "parent": "/_auth"
    },
    "/recordings/$id": {
      "filePath": "recordings/$id.route.tsx"
    },
    "/recordings/": {
      "filePath": "recordings/index.route.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
