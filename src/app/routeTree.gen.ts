/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SignUpRouteRouteImport } from './routes/sign-up.route';
import { Route as SignInRouteRouteImport } from './routes/sign-in.route';
import { Route as SettingsRouteRouteImport } from './routes/settings.route';
import { Route as ProfileRouteRouteImport } from './routes/profile.route';
import { Route as GuidesRouteRouteImport } from './routes/guides.route';
import { Route as IndexRouteRouteImport } from './routes/index.route';
import { Route as RecordingsIndexRouteRouteImport } from './routes/recordings/index.route';
import { Route as RecordingsIdRouteRouteImport } from './routes/recordings/$id.route';

const SignUpRouteRoute = SignUpRouteRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any);
const SignInRouteRoute = SignInRouteRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any);
const ProfileRouteRoute = ProfileRouteRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any);
const GuidesRouteRoute = GuidesRouteRouteImport.update({
  id: '/guides',
  path: '/guides',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const RecordingsIndexRouteRoute = RecordingsIndexRouteRouteImport.update({
  id: '/recordings/',
  path: '/recordings/',
  getParentRoute: () => rootRouteImport,
} as any);
const RecordingsIdRouteRoute = RecordingsIdRouteRouteImport.update({
  id: '/recordings/$id',
  path: '/recordings/$id',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '/sign-in': typeof SignInRouteRoute;
  '/sign-up': typeof SignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings': typeof RecordingsIndexRouteRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '/sign-in': typeof SignInRouteRoute;
  '/sign-up': typeof SignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings': typeof RecordingsIndexRouteRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRouteRoute;
  '/guides': typeof GuidesRouteRoute;
  '/profile': typeof ProfileRouteRoute;
  '/settings': typeof SettingsRouteRoute;
  '/sign-in': typeof SignInRouteRoute;
  '/sign-up': typeof SignUpRouteRoute;
  '/recordings/$id': typeof RecordingsIdRouteRoute;
  '/recordings/': typeof RecordingsIndexRouteRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/recordings/$id'
    | '/recordings';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/recordings/$id'
    | '/recordings';
  id:
    | '__root__'
    | '/'
    | '/guides'
    | '/profile'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/recordings/$id'
    | '/recordings/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute;
  GuidesRouteRoute: typeof GuidesRouteRoute;
  ProfileRouteRoute: typeof ProfileRouteRoute;
  SettingsRouteRoute: typeof SettingsRouteRoute;
  SignInRouteRoute: typeof SignInRouteRoute;
  SignUpRouteRoute: typeof SignUpRouteRoute;
  RecordingsIdRouteRoute: typeof RecordingsIdRouteRoute;
  RecordingsIndexRouteRoute: typeof RecordingsIndexRouteRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up';
      path: '/sign-up';
      fullPath: '/sign-up';
      preLoaderRoute: typeof SignUpRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/sign-in': {
      id: '/sign-in';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof SignInRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/profile': {
      id: '/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/guides': {
      id: '/guides';
      path: '/guides';
      fullPath: '/guides';
      preLoaderRoute: typeof GuidesRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/recordings/': {
      id: '/recordings/';
      path: '/recordings';
      fullPath: '/recordings';
      preLoaderRoute: typeof RecordingsIndexRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/recordings/$id': {
      id: '/recordings/$id';
      path: '/recordings/$id';
      fullPath: '/recordings/$id';
      preLoaderRoute: typeof RecordingsIdRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  GuidesRouteRoute: GuidesRouteRoute,
  ProfileRouteRoute: ProfileRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  SignInRouteRoute: SignInRouteRoute,
  SignUpRouteRoute: SignUpRouteRoute,
  RecordingsIdRouteRoute: RecordingsIdRouteRoute,
  RecordingsIndexRouteRoute: RecordingsIndexRouteRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
